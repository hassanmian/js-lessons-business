{"version":3,"sources":["data/UserKit.js","components/CustomerCreate.jsx","components/CustomerList.jsx","pages/HomePage.jsx","pages/LoginPage.jsx","pages/RegisterPage.jsx","pages/CustomerDetailPage.jsx","App.js","serviceWorker.js","index.js"],"names":["ROOT_URL","API_URL","AUTH_URL","LOGIN_URL","firstName","lastName","email","password","organisationName","organisationKind","url","payload","fetch","method","headers","this","getPublicHeaders","body","JSON","stringify","uid","token","getPrivateHeaders","id","localStorage","setItem","getItem","getToken","CustomerCreate","handleOnSuccess","useState","name","setName","organisationNr","setOrganisationNr","vatNr","setVatNr","reference","setReference","paymentTerm","setPaymentTerm","website","setWebsite","setEmail","phoneNumber","setPhoneNumber","userKit","UserKit","placeholder","value","onChange","e","target","onClick","customerCreate","then","res","json","data","CustomerList","customerList","length","map","customerItem","key","to","HomePage","setCustomerList","fetchClients","getCustomerList","results","useEffect","LoginPage","setPassword","history","useHistory","params","URLSearchParams","location","search","get","activateUser","push","login","setToken","RegisterPage","isSubmitted","setIsSubmitted","setFirstName","setLastName","companyName","setCompanyName","register","CustomerDetailPage","props","customerId","match","customerData","setCustomerData","getCustomerDetail","customerDelete","alert","App","me","setMe","getMe","catch","errors","console","log","path","component","Boolean","window","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.18311dbd.chunk.js","sourcesContent":["const ROOT_URL = 'https://frebi.willandskill.eu/'\nconst API_URL = `${ROOT_URL}api/v1/`\nconst AUTH_URL = `${ROOT_URL}auth/`\nconst LOGIN_URL = `${ROOT_URL}api-token-auth/`\n\nexport default class {\n  async register(firstName, lastName, email, password, organisationName, organisationKind) {\n    const url = `${AUTH_URL}users/`\n    const payload = { firstName, lastName, email, password, organisationName, organisationKind }\n    return fetch(url, {\n      method: \"POST\",\n      headers: this.getPublicHeaders(),\n      body: JSON.stringify(payload)\n    })\n  }\n\n  async activateUser(uid, token) {\n    const url = `${AUTH_URL}users/activate/`\n    const payload = {\n      uid, token\n    }\n    return fetch(url, {\n      method: \"POST\",\n      headers: this.getPublicHeaders(),\n      body: JSON.stringify(payload)\n    })\n  }\n\n  async login(email, password) {\n    const url = `${LOGIN_URL}`\n    const payload = {\n      email, password\n    }\n    return fetch(url, {\n      method: \"POST\",\n      headers: this.getPublicHeaders(),\n      body: JSON.stringify(payload)\n    })\n  }\n\n  async getMe() {\n    const url = `${API_URL}me`\n    return fetch(url, {\n      headers: this.getPrivateHeaders(),\n    })\n  }\n\n  async getCustomerList() {\n    const url = `${API_URL}customers`\n    return fetch(url, {\n      headers: this.getPrivateHeaders(),\n    })\n  }\n\n  async getCustomerDetail(id) {\n    const url = `${API_URL}customers/${id}/`\n    return fetch(url, {\n      headers: this.getPrivateHeaders(),\n    })\n  }\n\n  async customerDelete(id) {\n    const url = `${API_URL}customers/${id}/`\n    return fetch(url, {\n      method: \"DELETE\",\n      headers: this.getPrivateHeaders(),\n    })\n  }\n\n  async customerCreate(payload) {\n    const url = `${API_URL}customers`\n    return fetch(url, {\n      method: \"POST\",\n      headers: this.getPrivateHeaders(),\n      body: JSON.stringify(payload)\n    })\n  }\n\n  setToken(token) {\n    localStorage.setItem(\"BUSINESS_TOKEN\", token)\n  }\n\n  getToken() {\n    return localStorage.getItem(\"BUSINESS_TOKEN\")\n  }\n\n  getPublicHeaders() {\n    return {\n      \"Content-Type\": \"application/json\"\n    }\n  }\n\n  getPrivateHeaders() {\n    return {\n      \"Content-Type\": \"application/json\",\n      \"Authorization\": `Bearer ${this.getToken()}`\n    }\n  }\n}","import React, { useState } from 'react'\nimport UserKit from '../data/UserKit'\n\nexport default function CustomerCreate({handleOnSuccess}) {\n  const [name, setName] = useState(\"\")\n  const [organisationNr, setOrganisationNr] = useState(\"\")\n  const [vatNr, setVatNr] = useState(\"\")\n  const [reference, setReference] = useState(\"\")\n  const [paymentTerm, setPaymentTerm] = useState(\"\")\n  const [website, setWebsite] = useState(\"\")\n  const [email, setEmail] = useState(\"\")\n  const [phoneNumber, setPhoneNumber] = useState(\"\")\n\n  const userKit = new UserKit()\n\n  function handleCustomerCreate() {\n    const payload = {\n      name,\n      organisationNr,\n      vatNr,\n      reference,\n      paymentTerm,\n      website,\n      email,\n      phoneNumber\n    }\n    userKit.customerCreate(payload)\n      .then(res => res.json())\n      .then(data => {\n        if(handleOnSuccess) {\n          handleOnSuccess()\n        }\n      })\n  }\n\n  return (\n    <>\n      <h2>Create new Customer</h2>\n      <p><input placeholder=\"Customer Name\" value={name} onChange={(e) => setName(e.target.value)} /></p>\n      <p><input placeholder=\"organisationNr\" value={organisationNr} onChange={(e) => setOrganisationNr(e.target.value)} /></p>\n      <p><input placeholder=\"vatNr\" value={vatNr} onChange={(e) => setVatNr(e.target.value)} /></p>\n      <p><input placeholder=\"reference\" value={reference} onChange={(e) => setReference(e.target.value)} /></p>\n      <p><input placeholder=\"paymentTerm\" value={paymentTerm} onChange={(e) => setPaymentTerm(e.target.value)} /></p>\n      <p><input placeholder=\"website\" value={website} onChange={(e) => setWebsite(e.target.value)} /></p>\n      <p><input placeholder=\"email\" value={email} onChange={(e) => setEmail(e.target.value)} /></p>\n      <p><input placeholder=\"phoneNumber\" value={phoneNumber} onChange={(e) => setPhoneNumber(e.target.value)} /></p>\n      <button onClick={handleCustomerCreate}>Create test customer</button>\n    </>\n  )\n}\n\n\n/*\n\norganisationNr\tstring\ntitle: Organisation nr\nmaxLength: 30\nx-nullable: true\nvatNr\tstring\ntitle: Vat nr\nmaxLength: 15\nx-nullable: true\nreference\tstring\ntitle: Reference\nmaxLength: 50\nx-nullable: true\npaymentTerm\tinteger\ntitle: Payment term\nmaximum: 2147483647\nminimum: 0\nwebsite\tstring\ntitle: Website\nmaxLength: 50\nx-nullable: true\nemail\tstring($email)\ntitle: Email\nmaxLength: 254\nx-nullable: true\nphoneNumber\tstring\ntitle: Phone number\nmaxLength: 20\nx-nullable: true\n*/","import React from 'react'\nimport { Link } from 'react-router-dom'\n\nexport default function CustomerList({ customerList }) {\n  return (\n    <>\n      {customerList.length === 0 && (\n        <strong>You don't have any customer.</strong>\n      )}\n\n      {customerList.map(customerItem => {\n        return (\n          <p key={customerItem.id}>\n            <Link to={`/customer/${customerItem.id}`}>{customerItem.name}</Link>\n          </p>\n        )\n      })}\n    </>\n  )\n}\n","import React, { useState, useEffect } from 'react'\nimport UserKit from '../data/UserKit';\nimport CustomerCreate from '../components/CustomerCreate';\nimport CustomerList from '../components/CustomerList';\n\n\nexport default function HomePage() {\n  const [customerList, setCustomerList] = useState([])\n  \n  const userKit = new UserKit()\n  \n  function fetchClients() {\n    userKit.getCustomerList()\n      .then(res => res.json())\n      .then(data => {\n        setCustomerList(data.results)\n      })\n  }\n  \n\n  useEffect(() => {\n    fetchClients()\n  }, [])\n\n  return (\n    <>\n      <h1>Welcome to Business Application</h1>\n      <div>\n        <h2>Customers</h2>\n        <div>\n          <CustomerList customerList={customerList} />\n        </div>\n\n        <hr />\n\n        <div>\n          <CustomerCreate handleOnSuccess={fetchClients} />\n        </div>\n      </div>\n\n\n    </>\n  )\n}\n","import React, { useState } from 'react'\nimport { useHistory } from 'react-router-dom'\nimport UserKit from '../data/UserKit';\n\nexport default function LoginPage() {\n  const [email, setEmail] = useState(\"mian+test+123@willandskill.se\")\n  const [password, setPassword] = useState(\"js-fend-19\")\n\n  const userKit = new UserKit()\n\n  const history = useHistory()\n\n  // Use URL Search Params to parse the query parameters from the url\n  const params = new URLSearchParams(history.location.search);\n  const uid = params.get('uid')\n  const token = params.get('token')\n  \n  function handleLogin() {\n    userKit.login(email, password)\n    .then(res => res.json())\n    .then(data => {\n      userKit.setToken(data.token)\n      history.push('/home')\n    })\n  }\n\n  function handleActivateAccount() {\n    userKit.activateUser(\n      uid, token\n    ).then(\n      history.push('/login')\n    )\n  }\n\n  return (\n    <>\n      <h1>Activate account</h1>\n      {/* Only show that account is beeing activated if uid and token exists in URL */}\n      {uid && token && (\n        <div>\n          Your account is being activated\n              {handleActivateAccount()}\n        </div>\n      )}\n      {/* If uid and token doesn't exist in url, render login form */}\n      {!uid && !token && (\n        <div>\n          <p>\n            Your account is now active. Please Login\n              </p>\n          <p><input placeholder=\"email\" value={email} onChange={(e) => setEmail(e.target.value)} /></p>\n          <p><input placeholder=\"password\" value={password} onChange={(e) => setPassword(e.target.value)} /></p>\n          <button onClick={handleLogin}>Login</button>\n        </div>\n      )}\n    </>\n  )\n}\n","import React, {useState} from 'react'\nimport UserKit from '../data/UserKit';\n\nexport default function RegisterPage() {\n  const [isSubmitted, setIsSubmitted] = useState(false)\n  const [firstName, setFirstName] = useState(\"Hassan\")\n  const [lastName, setLastName] = useState(\"Mian\")\n  const [email, setEmail] = useState(\"mian+test+123@willandskill.se\")\n  const [password, setPassword] = useState(\"js-fend-19\")\n  const [companyName, setCompanyName] = useState(\"Apple Inc\")\n\n  \n  const userKit = new UserKit()\n  function handleCreateUser() {\n    userKit.register(firstName, lastName, email, password, companyName, \"0\")\n    .then(res=> res.json())\n    .then(data => {\n      setIsSubmitted(true)\n    })\n  }\n\n  return (\n    <>\n    {!isSubmitted && (\n      <>\n      <h1>Register</h1>\n      <p><input placeholder=\"First Name\" value={firstName} onChange={(e) => setFirstName(e.target.value)}/></p>\n      <p><input placeholder=\"Last Name\" value={lastName} onChange={(e) => setLastName(e.target.value)}/></p>\n      <p><input placeholder=\"Email\" value={email} onChange={(e) => setEmail(e.target.value)}/></p>\n      <p><input placeholder=\"Password\" value={password} onChange={(e) => setPassword(e.target.value)}/></p>\n      <p><input placeholder=\"Company Name\" value={companyName} onChange={(e) => setCompanyName(e.target.value)}/></p>\n\n      <button onClick={handleCreateUser}>Create User</button>\n      </>\n    )}\n    {isSubmitted && (\n      <p>Please check your email, {email}, for activation link</p>\n    )}\n      \n    </>\n  )\n}\n","import React, { useEffect, useState } from 'react'\nimport {useHistory} from 'react-router-dom'\nimport UserKit from '../data/UserKit'\n\nexport default function CustomerDetailPage(props) {\n\n  const customerId = props.match.params.id\n  const [customerData, setCustomerData] = useState(null)\n  const userKit = new UserKit()\n  const history = useHistory()\n\n  useEffect(() => {\n    userKit.getCustomerDetail(customerId)\n      .then(res => res.json())\n      .then(data => {\n        setCustomerData(data)\n      })\n  }, [])\n\n  function handleDelete() {\n    userKit.customerDelete(customerId)\n    .then(res => {\n      alert('Customer is deleted')\n      history.push(\"/home\")\n    })\n  }\n\n  return (\n    <>\n      {!customerData && (\n        <p>Loading Customer data</p>\n      )}\n      {customerData && (\n        <>\n          <h1>{customerData.name}</h1>\n          <button onClick={handleDelete}>Delete Customer</button>\n          <p>name: {customerData.name}</p>\n          <p>organisationNr: {customerData.organisationNr}</p>\n          <p>vatNr: {customerData.vatNr}</p>\n          <p>reference: {customerData.reference}</p>\n          <p>paymentTerm: {customerData.paymentTerm}</p>\n          <p>website: {customerData.website}</p>\n          <p>email: {customerData.email}</p>\n          <p>phoneNumbe: {customerData.phoneNumber}</p>\n        </>\n      )}\n    </>\n  )\n}\n","import React, {useState, useEffect} from 'react';\nimport {Switch, Route, useHistory} from 'react-router-dom'\nimport './App.css';\nimport HomePage from './pages/HomePage';\nimport LoginPage from './pages/LoginPage';\nimport RegisterPage from './pages/RegisterPage';\nimport CustomerDetailPage from './pages/CustomerDetailPage';\nimport UserKit from './data/UserKit';\n\n\nfunction App() {\n\n  const [me, setMe] = useState(null)\n  \n  const userKit = new UserKit()\n\n  useEffect(() => {\n    userKit.getMe()\n    .then(res => res.json())\n    .then(data => {\n      setMe(data)\n    })\n    .catch(errors => {\n      console.log(errors)\n    })\n  }, [])\n  \n  return (\n    <div>\n      {me && me.firstName && (\n        <p>Welcome {me.firstName}</p>\n      )}\n      <Switch>\n        <Route path=\"/customer/:id\" component={CustomerDetailPage}>\n        </Route>\n        <Route path=\"/home\">\n          <HomePage />\n        </Route>\n        <Route path=\"/login\">\n          <LoginPage />\n        </Route>\n        <Route path=\"/\">\n          <RegisterPage />\n        </Route>\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n\n\n\n/*\nemail: nackademin@willandskill.se\npassword: js-fend-19\n*/","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport { BrowserRouter } from 'react-router-dom'\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}